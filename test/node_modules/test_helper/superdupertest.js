var url = require("url");
var callsite = require("callsite");
var supertest = require("supertest");

//==============================================================================

function getRoute(method, path) {
  var route = method + " ";

  try {
    var urlObj = url.parse(path, true);
    route += urlObj.pathname;
  } catch(e) {
  }

  return route;
}

//------------------------------------------------------------------------------

function getCallerBasename(callsite) {
  var site = callsite[1];
  var basename = site.getFileName()
                     .replace(TEST_ROOT_PATH+"/controllers/", "")
                     .replace(".js", "");
  return basename;
}

//------------------------------------------------------------------------------

var _routes = null
function getRoutes() {
  if (!_routes) {
    _routes = _.reduce(sails.config.routes, function(result, val, key) {
      var xkey = key.replace(/\s+/, '\\s+').replace(':id', '[^\\s/]+');
      var xval = val.toString().replace(/,.*/, '').match(/(.+)\.(.+)/);
      result.push({
        controller: xval[1].replace(/[Cc]ontroller/, '') + 'Controller',
        action: xval[2],
        route: xkey
      });
      return result;
    }, []);
  }

  return _routes;
}

//------------------------------------------------------------------------------

function find(moduleName, route) {
  var routes = getRoutes();
  var result = _.find(routes, function(item) {
    return item.controller.toLowerCase() == moduleName.toLowerCase()
           && route.match(new RegExp(item.route));
  }) || null;

  return result;
}

//------------------------------------------------------------------------------

function load(moduleName) {
  var module = null;
  if (moduleName) {
    var modulePath = process.cwd() + "/api/controllers/" + moduleName;
    module = require(modulePath);
  }

  return module;
}

//==============================================================================

supertest.Test.prototype.assigns = function(key, val) {
  var basename = getCallerBasename(callsite());
  var route = getRoute(this.method, this.url);
  var options = find(basename, route) || {};
  var module = load(options.controller) || {};
  var action = module[options.action];

  var view = sinon.spy();
  var req = {};
  var res = {
    locals: {},
    view: view
  };

  //console.log(options);
  //console.log(module);

  if (typeof action == "function") {
    action(req, res);
    expect(view.called).not.to.be.ok;
  } 

  return this;
};

module.exports = supertest;
